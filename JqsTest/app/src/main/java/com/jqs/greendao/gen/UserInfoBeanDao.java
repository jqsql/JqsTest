package com.jqs.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, Long> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "Uid", true, "_id");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
        public final static Property UserHeader = new Property(2, String.class, "UserHeader", false, "USER_HEADER");
        public final static Property Portrait = new Property(3, String.class, "Portrait", false, "PORTRAIT");
        public final static Property Signature = new Property(4, String.class, "Signature", false, "SIGNATURE");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Uid
                "\"USER_NAME\" TEXT," + // 1: UserName
                "\"USER_HEADER\" TEXT," + // 2: UserHeader
                "\"PORTRAIT\" TEXT," + // 3: Portrait
                "\"SIGNATURE\" TEXT);"); // 4: Signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long Uid = entity.getUid();
        if (Uid != null) {
            stmt.bindLong(1, Uid);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
 
        String UserHeader = entity.getUserHeader();
        if (UserHeader != null) {
            stmt.bindString(3, UserHeader);
        }
 
        String Portrait = entity.getPortrait();
        if (Portrait != null) {
            stmt.bindString(4, Portrait);
        }
 
        String Signature = entity.getSignature();
        if (Signature != null) {
            stmt.bindString(5, Signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        Long Uid = entity.getUid();
        if (Uid != null) {
            stmt.bindLong(1, Uid);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
 
        String UserHeader = entity.getUserHeader();
        if (UserHeader != null) {
            stmt.bindString(3, UserHeader);
        }
 
        String Portrait = entity.getPortrait();
        if (Portrait != null) {
            stmt.bindString(4, Portrait);
        }
 
        String Signature = entity.getSignature();
        if (Signature != null) {
            stmt.bindString(5, Signature);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserHeader
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Portrait
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserHeader(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPortrait(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
