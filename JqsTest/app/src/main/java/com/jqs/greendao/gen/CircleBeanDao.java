package com.jqs.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIRCLE_BEAN".
*/
public class CircleBeanDao extends AbstractDao<CircleBean, Long> {

    public static final String TABLENAME = "CIRCLE_BEAN";

    /**
     * Properties of entity CircleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CircleId = new Property(0, Long.class, "CircleId", true, "_id");
        public final static Property TimeStr = new Property(1, String.class, "TimeStr", false, "TIME_STR");
        public final static Property Content = new Property(2, String.class, "Content", false, "CONTENT");
        public final static Property Type = new Property(3, int.class, "Type", false, "TYPE");
        public final static Property Picture = new Property(4, String.class, "Picture", false, "PICTURE");
        public final static Property VoidePicture = new Property(5, String.class, "VoidePicture", false, "VOIDE_PICTURE");
        public final static Property VoideName = new Property(6, String.class, "VoideName", false, "VOIDE_NAME");
        public final static Property Comments = new Property(7, int.class, "Comments", false, "COMMENTS");
        public final static Property Likes = new Property(8, int.class, "Likes", false, "LIKES");
        public final static Property IsTransmit = new Property(9, boolean.class, "isTransmit", false, "IS_TRANSMIT");
        public final static Property Author = new Property(10, String.class, "Author", false, "AUTHOR");
    }

    private final StringListConverent PictureConverter = new StringListConverent();
    private final Bean2StringConverent AuthorConverter = new Bean2StringConverent();

    public CircleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CircleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIRCLE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: CircleId
                "\"TIME_STR\" TEXT," + // 1: TimeStr
                "\"CONTENT\" TEXT," + // 2: Content
                "\"TYPE\" INTEGER NOT NULL ," + // 3: Type
                "\"PICTURE\" TEXT," + // 4: Picture
                "\"VOIDE_PICTURE\" TEXT," + // 5: VoidePicture
                "\"VOIDE_NAME\" TEXT," + // 6: VoideName
                "\"COMMENTS\" INTEGER NOT NULL ," + // 7: Comments
                "\"LIKES\" INTEGER NOT NULL ," + // 8: Likes
                "\"IS_TRANSMIT\" INTEGER NOT NULL ," + // 9: isTransmit
                "\"AUTHOR\" TEXT);"); // 10: Author
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIRCLE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CircleBean entity) {
        stmt.clearBindings();
 
        Long CircleId = entity.getCircleId();
        if (CircleId != null) {
            stmt.bindLong(1, CircleId);
        }
 
        String TimeStr = entity.getTimeStr();
        if (TimeStr != null) {
            stmt.bindString(2, TimeStr);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(3, Content);
        }
        stmt.bindLong(4, entity.getType());
 
        List Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(5, PictureConverter.convertToDatabaseValue(Picture));
        }
 
        String VoidePicture = entity.getVoidePicture();
        if (VoidePicture != null) {
            stmt.bindString(6, VoidePicture);
        }
 
        String VoideName = entity.getVoideName();
        if (VoideName != null) {
            stmt.bindString(7, VoideName);
        }
        stmt.bindLong(8, entity.getComments());
        stmt.bindLong(9, entity.getLikes());
        stmt.bindLong(10, entity.getIsTransmit() ? 1L: 0L);
 
        UserInfoBean Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(11, AuthorConverter.convertToDatabaseValue(Author));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CircleBean entity) {
        stmt.clearBindings();
 
        Long CircleId = entity.getCircleId();
        if (CircleId != null) {
            stmt.bindLong(1, CircleId);
        }
 
        String TimeStr = entity.getTimeStr();
        if (TimeStr != null) {
            stmt.bindString(2, TimeStr);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(3, Content);
        }
        stmt.bindLong(4, entity.getType());
 
        List Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(5, PictureConverter.convertToDatabaseValue(Picture));
        }
 
        String VoidePicture = entity.getVoidePicture();
        if (VoidePicture != null) {
            stmt.bindString(6, VoidePicture);
        }
 
        String VoideName = entity.getVoideName();
        if (VoideName != null) {
            stmt.bindString(7, VoideName);
        }
        stmt.bindLong(8, entity.getComments());
        stmt.bindLong(9, entity.getLikes());
        stmt.bindLong(10, entity.getIsTransmit() ? 1L: 0L);
 
        UserInfoBean Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(11, AuthorConverter.convertToDatabaseValue(Author));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CircleBean readEntity(Cursor cursor, int offset) {
        CircleBean entity = new CircleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // CircleId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TimeStr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Content
            cursor.getInt(offset + 3), // Type
            cursor.isNull(offset + 4) ? null : PictureConverter.convertToEntityProperty(cursor.getString(offset + 4)), // Picture
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // VoidePicture
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // VoideName
            cursor.getInt(offset + 7), // Comments
            cursor.getInt(offset + 8), // Likes
            cursor.getShort(offset + 9) != 0, // isTransmit
            cursor.isNull(offset + 10) ? null : AuthorConverter.convertToEntityProperty(cursor.getString(offset + 10)) // Author
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CircleBean entity, int offset) {
        entity.setCircleId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setPicture(cursor.isNull(offset + 4) ? null : PictureConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setVoidePicture(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVoideName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComments(cursor.getInt(offset + 7));
        entity.setLikes(cursor.getInt(offset + 8));
        entity.setIsTransmit(cursor.getShort(offset + 9) != 0);
        entity.setAuthor(cursor.isNull(offset + 10) ? null : AuthorConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CircleBean entity, long rowId) {
        entity.setCircleId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CircleBean entity) {
        if(entity != null) {
            return entity.getCircleId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CircleBean entity) {
        return entity.getCircleId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
